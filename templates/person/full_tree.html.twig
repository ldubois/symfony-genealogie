{% extends 'base.html.twig' %}

{% block title %}Arbre G√©n√©alogique Complet{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .tree-container {
            padding: 20px;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            overflow-x: auto;
        }
        
        .tree-header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: white;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .tree-header h1 {
            color: #2c3e50;
            margin-bottom: 10px;
            font-weight: 300;
        }
        
        .tree-stats {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin-top: 15px;
        }
        
        .stat-item {
            text-align: center;
        }
        
        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #3498db;
        }
        
        .stat-label {
            color: #7f8c8d;
            font-size: 0.9rem;
        }
        
        .tree-svg-container {
            position: relative;
            width: 100%;
            height: 80vh;
            background: white;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            overflow: auto;
        }
        
        .tree-svg {
            position: absolute;
            top: 0;
            left: 0;
            z-index: 1;
            pointer-events: none;
        }
        
        .tree-content {
            position: relative;
            z-index: 2;
            padding: 40px;
        }
        
        .generation {
            display: flex;
            justify-content: center;
            align-items: flex-start;
            margin-bottom: 100px;
            position: relative;
        }
        
        .generation-label {
            position: absolute;
            left: -30px;
            top: 50%;
            transform: translateY(-50%) rotate(-90deg);
            background: #3498db;
            color: white;
            padding: 5px 15px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: bold;
            white-space: nowrap;
        }
        
        .person-node {
            background: white;
            border-radius: 12px;
            padding: 15px;
            margin: 0 20px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            border: 3px solid;
            min-width: 180px;
            text-align: center;
            position: relative;
        }
        
        .person-node.male {
            border-color: #3498db;
            background: linear-gradient(135deg, #ffffff 0%, #ebf3fd 100%);
        }
        
        .person-node.female {
            border-color: #e91e63;
            background: linear-gradient(135deg, #ffffff 0%, #fce4ec 100%);
        }
        
        .person-node.unknown {
            border-color: #95a5a6;
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        }
        
        .person-node:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        }
        
        .person-avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            margin: 0 auto 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            color: white;
        }
        
        .person-avatar.male {
            background: linear-gradient(135deg, #3498db, #2980b9);
        }
        
        .person-avatar.female {
            background: linear-gradient(135deg, #e91e63, #c2185b);
        }
        
        .person-avatar.unknown {
            background: linear-gradient(135deg, #95a5a6, #7f8c8d);
        }
        
        .person-name {
            font-size: 1.1rem;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 8px;
        }
        
        .person-dates {
            color: #7f8c8d;
            font-size: 0.8rem;
            margin-bottom: 10px;
        }
        
        .person-links {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 5px;
            margin-top: 10px;
        }
        
        .conjugal-tag {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            padding: 2px 6px;
            border-radius: 10px;
            font-size: 0.7rem;
            display: inline-block;
        }
        
        .conjugal-tag.conjoint {
            background: #d4edda;
            border-color: #c3e6cb;
            color: #155724;
        }
        
        .conjugal-tag.ex-conjoint {
            background: #f8d7da;
            border-color: #f5c6cb;
            color: #721c24;
        }
        
        .conjugal-tag.compagnon {
            background: #fff3cd;
            border-color: #ffeaa7;
            color: #856404;
        }
        
        .person-actions {
            margin-top: 10px;
            display: flex;
            gap: 5px;
            justify-content: center;
        }
        
        .btn-tree {
            padding: 4px 8px;
            font-size: 0.7rem;
            border-radius: 4px;
            text-decoration: none;
            border: none;
            cursor: pointer;
        }
        
        .connection-line {
            stroke: #7f8c8d;
            stroke-width: 2;
            fill: none;
        }
        
        .connection-line.parent-child {
            stroke: #3498db;
            stroke-width: 3;
        }
        
        .connection-line.conjugal {
            stroke: #e91e63;
            stroke-width: 2;
            stroke-dasharray: 5,5;
        }
        
        .search-controls {
            margin-bottom: 20px;
            text-align: center;
        }
        
        .search-input {
            width: 100%;
            max-width: 400px;
            padding: 12px 20px;
            border: 2px solid #ecf0f1;
            border-radius: 25px;
            font-size: 1rem;
            outline: none;
            transition: border-color 0.3s ease;
            margin-bottom: 10px;
        }
        
        .search-input:focus {
            border-color: #3498db;
        }
        
        .tree-controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .control-btn {
            padding: 8px 16px;
            background: #3498db;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
        }
        
        .control-btn:hover {
            background: #2980b9;
        }
    </style>
{% endblock %}

{% block body %}
<div class="tree-container">
    <div class="tree-header">
        <h1><i class="fas fa-sitemap"></i> Arbre G√©n√©alogique Complet</h1>
        <p class="text-muted">Visualisation compl√®te des relations familiales</p>
        
        <div class="tree-stats">
            {% set totalPeople = treeData.positionedPeople|length %}
            {% set totalMen = 0 %}
            {% set totalWomen = 0 %}
            
            {% for personId, personData in treeData.positionedPeople %}
                {% if personData.person.gender == 'homme' %}
                    {% set totalMen = totalMen + 1 %}
                {% elseif personData.person.gender == 'femme' %}
                    {% set totalWomen = totalWomen + 1 %}
                {% endif %}
            {% endfor %}
            
            <div class="stat-item">
                <div class="stat-number">{{ totalPeople }}</div>
                <div class="stat-label">Personnes</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">{{ totalMen }}</div>
                <div class="stat-label">Hommes</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">{{ totalWomen }}</div>
                <div class="stat-label">Femmes</div>
            </div>
        </div>
    </div>
    
    <div class="search-controls">
        <input type="text" id="searchInput" class="search-input" placeholder="üîç Rechercher une personne...">
    </div>
    
    <div class="tree-controls">
        <button class="control-btn" onclick="centerTree()">
            <i class="fas fa-crosshairs"></i> Centrer
        </button>
        <button class="control-btn" onclick="zoomIn()">
            <i class="fas fa-search-plus"></i> Zoom +
        </button>
        <button class="control-btn" onclick="zoomOut()">
            <i class="fas fa-search-minus"></i> Zoom -
        </button>
        <button class="control-btn" onclick="toggleConnections()">
            <i class="fas fa-project-diagram"></i> Connexions
        </button>
    </div>
    
    <div class="tree-svg-container" id="treeContainer">
        <svg class="tree-svg" id="treeSvg">
            <!-- Les connexions seront dessin√©es ici par JavaScript -->
        </svg>
        
        <div class="tree-content" id="treeContent">
            <!-- Les personnes sont positionn√©es absolument selon les calculs du backend -->
            {% for personId, personData in treeData.positionedPeople %}
                {% set person = personData.person %}
                {% set genderClass = person.gender == 'homme' ? 'male' : (person.gender == 'femme' ? 'female' : 'unknown') %}
                
                <div class="person-node {{ genderClass }}" 
                     data-person-id="{{ person.id }}" 
                     data-level="{{ personData.level }}"
                     data-name="{{ person.name|lower }}"
                     data-x="{{ personData.x }}"
                     data-y="{{ personData.y }}"
                     style="position: absolute; 
                            width: {{ personData.width }}px;
                            height: {{ personData.height }}px;">
                    
                    <div class="person-avatar {{ genderClass }}">
                        {% if person.gender == 'homme' %}
                            üë®
                        {% else %}
                            üë©
                        {% endif %}
                    </div>
                    
                    <div class="person-name">{{ person.name }}</div>
                    
                    <div class="person-dates">
                        {% if person.birthDate %}
                            <div><i class="fas fa-birthday-cake"></i> {{ person.birthDate }}</div>
                        {% endif %}
                        {% if person.deathDate %}
                            <div><i class="fas fa-cross"></i> {{ person.deathDate }}</div>
                        {% endif %}
                    </div>
                    
                    <div class="person-actions">
                        <a href="{{ path('app_person_show', {id: person.id}) }}" class="btn btn-primary btn-tree">
                            <i class="fas fa-eye"></i>
                        </a>
                        <a href="{{ path('app_person_tree', {id: person.id}) }}" class="btn btn-success btn-tree">
                            <i class="fas fa-sitemap"></i>
                        </a>
                        <a href="{{ path('app_person_edit', {id: person.id}) }}" class="btn btn-warning btn-tree">
                            <i class="fas fa-edit"></i>
                        </a>
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    const treeContent = document.getElementById('treeContent');
    const treeSvg = document.getElementById('treeSvg');
    const personNodes = treeContent.querySelectorAll('.person-node');
    
    let showConnections = true;
    let zoomLevel = 1;
    
    // Donn√©es calcul√©es c√¥t√© serveur
    const treeData = {{ treeData|json_encode|raw }};
    
    // Recherche
    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        
        personNodes.forEach(node => {
            const personName = node.dataset.name;
            if (personName.includes(searchTerm)) {
                node.style.display = 'block';
                node.style.opacity = '1';
                node.style.transform = searchTerm ? 'scale(1.05)' : '';
                node.style.boxShadow = searchTerm ? '0 8px 25px rgba(52, 152, 219, 0.4)' : '';
            } else {
                node.style.opacity = searchTerm ? '0.3' : '1';
                node.style.transform = '';
                node.style.boxShadow = '';
            }
        });
    });
    
    // Calculer les dimensions n√©cessaires pour l'arbre
    function calculateTreeDimensions() {
        const people = treeData.positionedPeople || {};
        let minX = Infinity, maxX = -Infinity, minY = Infinity, maxY = -Infinity;
        
        // Trouver les limites de l'arbre
        Object.values(people).forEach(personData => {
            minX = Math.min(minX, personData.x);
            maxX = Math.max(maxX, personData.x + personData.width);
            minY = Math.min(minY, personData.y);
            maxY = Math.max(maxY, personData.y + personData.height);
        });
        
        // Ajouter de la marge
        const margin = 100;
        return {
            width: maxX - minX + (margin * 2),
            height: maxY - minY + (margin * 2),
            offsetX: -minX + margin,
            offsetY: -minY + margin
        };
    }
    
    // Rendu simple des chemins SVG calcul√©s c√¥t√© serveur
    function renderConnections() {
        if (!showConnections) {
            treeSvg.innerHTML = '';
            return;
        }
        
        const dimensions = calculateTreeDimensions();
        
        // Ajuster la taille du SVG et du conteneur
        treeSvg.setAttribute('width', dimensions.width);
        treeSvg.setAttribute('height', dimensions.height);
        treeContent.style.width = dimensions.width + 'px';
        treeContent.style.height = dimensions.height + 'px';
        
        let svgContent = '';
        const svgPaths = treeData.svgPaths || [];
        
        svgPaths.forEach(path => {
            if (path.type === 'line') {
                svgContent += `
                    <line x1="${path.x1 + dimensions.offsetX}" y1="${path.y1 + dimensions.offsetY}" 
                          x2="${path.x2 + dimensions.offsetX}" y2="${path.y2 + dimensions.offsetY}" 
                          stroke="${path.stroke}" 
                          stroke-width="${path.strokeWidth}" 
                          fill="none" />
                `;
            } else if (path.type === 'path') {
                // Ajuster les coordonn√©es du path pour le d√©calage
                let adjustedPath = path.d.replace(/M\s*(-?\d+)/g, (match, x) => `M ${parseInt(x) + dimensions.offsetX}`);
                adjustedPath = adjustedPath.replace(/Q\s*(-?\d+)\s*(-?\d+)\s*(-?\d+)\s*(-?\d+)/g, (match, x1, y1, x2, y2) => `Q ${parseInt(x1) + dimensions.offsetX} ${parseInt(y1) + dimensions.offsetY} ${parseInt(x2) + dimensions.offsetX} ${parseInt(y2) + dimensions.offsetY}`);
                
                svgContent += `
                    <path d="${adjustedPath}" 
                          stroke="${path.stroke}" 
                          stroke-width="${path.strokeWidth}" 
                          ${path.strokeDasharray ? `stroke-dasharray="${path.strokeDasharray}"` : ''}
                          fill="none" />
                `;
            }
        });
        
        treeSvg.innerHTML = svgContent;
    }
    
    // Fonctions de contr√¥le
    window.centerTree = function() {
        treeContent.scrollIntoView({ behavior: 'smooth', block: 'center' });
    };
    
    window.zoomIn = function() {
        zoomLevel = Math.min(zoomLevel + 0.1, 2);
        treeContent.style.transform = `scale(${zoomLevel})`;
        treeSvg.style.transform = `scale(${zoomLevel})`;
        setTimeout(renderConnections, 300);
    };
    
    window.zoomOut = function() {
        zoomLevel = Math.max(zoomLevel - 0.1, 0.5);
        treeContent.style.transform = `scale(${zoomLevel})`;
        treeSvg.style.transform = `scale(${zoomLevel})`;
        setTimeout(renderConnections, 300);
    };
    
    window.toggleConnections = function() {
        showConnections = !showConnections;
        renderConnections();
    };
    
    // Positionner les personnes avec les bonnes coordonn√©es
    function positionPeople() {
        const dimensions = calculateTreeDimensions();
        
        personNodes.forEach(node => {
            const x = parseInt(node.dataset.x);
            const y = parseInt(node.dataset.y);
            node.style.left = (x + dimensions.offsetX) + 'px';
            node.style.top = (y + dimensions.offsetY) + 'px';
        });
    }
    
    // Initialisation
    setTimeout(() => {
        positionPeople();
        renderConnections();
    }, 100);
    
    // Redessiner lors du redimensionnement
    window.addEventListener('resize', function() {
        setTimeout(renderConnections, 300);
    });
});
</script>
{% endblock %}