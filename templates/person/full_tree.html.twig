{% extends 'base.html.twig' %}

{% block title %}Arbre Généalogique Complet{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .tree-container {
            padding: 20px;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            overflow-x: auto;
        }
        
        .tree-header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: white;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .tree-header h1 {
            color: #2c3e50;
            margin-bottom: 10px;
            font-weight: 300;
        }
        
        .tree-stats {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin-top: 15px;
        }
        
        .stat-item {
            text-align: center;
        }
        
        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #3498db;
        }
        
        .stat-label {
            color: #7f8c8d;
            font-size: 0.9rem;
        }
        
        .tree-svg-container {
            position: relative;
            width: 100%;
            height: 80vh;
            background: white;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            overflow: auto;
        }
        
        .tree-svg {
            position: absolute;
            top: 0;
            left: 0;
            z-index: 1;
            pointer-events: auto;
        }
        
        .tree-content {
            position: relative;
            z-index: 2;
            padding: 40px;
        }
        
        .generation {
            display: flex;
            justify-content: center;
            align-items: flex-start;
            margin-bottom: 100px;
            position: relative;
        }
        
        .generation-label {
            position: absolute;
            left: -30px;
            top: 50%;
            transform: translateY(-50%) rotate(-90deg);
            background: #3498db;
            color: white;
            padding: 5px 15px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: bold;
            white-space: nowrap;
        }
        
        .person-node {
            background: white;
            border-radius: 12px;
            padding: 15px;
            margin: 0 20px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            border: 3px solid;
            min-width: 180px;
            text-align: center;
            position: relative;
        }
        
        .person-node.male {
            border-color: #3498db;
            background: linear-gradient(135deg, #ffffff 0%, #ebf3fd 100%);
        }
        
        .person-node.female {
            border-color: #e91e63;
            background: linear-gradient(135deg, #ffffff 0%, #fce4ec 100%);
        }
        
        .person-node.unknown {
            border-color: #95a5a6;
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        }
        
        .person-node:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        }
        
        .person-avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            margin: 0 auto 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            color: white;
        }
        
        .person-avatar.male {
            background: linear-gradient(135deg, #3498db, #2980b9);
        }
        
        .person-avatar.female {
            background: linear-gradient(135deg, #e91e63, #c2185b);
        }
        
        .person-avatar.unknown {
            background: linear-gradient(135deg, #95a5a6, #7f8c8d);
        }
        
        .person-name {
            font-size: 1.1rem;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 8px;
        }
        
        .person-dates {
            color: #7f8c8d;
            font-size: 0.8rem;
            margin-bottom: 10px;
        }
        
        .person-links {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 5px;
            margin-top: 10px;
        }
        
        .conjugal-tag {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            padding: 2px 6px;
            border-radius: 10px;
            font-size: 0.7rem;
            display: inline-block;
        }
        
        .conjugal-tag.conjoint {
            background: #d4edda;
            border-color: #c3e6cb;
            color: #155724;
        }
        
        .conjugal-tag.ex-conjoint {
            background: #f8d7da;
            border-color: #f5c6cb;
            color: #721c24;
        }
        
        .conjugal-tag.compagnon {
            background: #fff3cd;
            border-color: #ffeaa7;
            color: #856404;
        }
        
        .person-actions {
            margin-top: 10px;
            display: flex;
            gap: 5px;
            justify-content: center;
        }
        
        .btn-tree {
            padding: 4px 8px;
            font-size: 0.7rem;
            border-radius: 4px;
            text-decoration: none;
            border: none;
            cursor: pointer;
        }
        
        .connection-line {
            stroke: #7f8c8d;
            stroke-width: 2;
            fill: none;
        }
        
        .connection-line.parent-child {
            stroke: #3498db;
            stroke-width: 3;
        }
        
        .connection-line.conjugal {
            stroke: #e91e63;
            stroke-width: 2;
            stroke-dasharray: 5,5;
        }
        
        .search-controls {
            margin-bottom: 20px;
            text-align: center;
        }
        
        .search-input {
            width: 100%;
            max-width: 400px;
            padding: 12px 20px;
            border: 2px solid #ecf0f1;
            border-radius: 25px;
            font-size: 1rem;
            outline: none;
            transition: border-color 0.3s ease;
            margin-bottom: 10px;
        }
        
        .search-input:focus {
            border-color: #3498db;
        }
        
        .tree-controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .control-btn {
            padding: 8px 16px;
            background: #3498db;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
        }
        
        .control-btn:hover {
            background: #2980b9;
        }
        
        /* Modal plein écran pour SVG */
        .fullscreen-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.9);
            overflow: auto;
        }
        
        .fullscreen-modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .fullscreen-content {
            position: relative;
            width: 95%;
            height: 95%;
            background: white;
            border-radius: 10px;
            overflow: hidden;
        }
        
        .fullscreen-header {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            background: rgba(255,255,255,0.95);
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 10;
            border-bottom: 1px solid #dee2e6;
        }
        
        .fullscreen-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #2c3e50;
        }
        
        .fullscreen-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 20px;
        }
        
        .zoom-controls {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .action-controls {
            display: flex;
            gap: 10px;
        }
        
        .zoom-level {
            font-size: 0.9rem;
            font-weight: 600;
            color: #2c3e50;
            min-width: 50px;
            text-align: center;
        }
        
        .fullscreen-btn {
            padding: 8px 12px;
            background: #3498db;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9rem;
        }
        
        .fullscreen-btn:hover {
            background: #2980b9;
        }
        
        .fullscreen-btn.danger {
            background: #e74c3c;
        }
        
        .fullscreen-btn.danger:hover {
            background: #c0392b;
        }
        
        .fullscreen-svg-container {
            width: 100%;
            height: 100%;
            overflow: auto;
            padding-top: 60px;
        }
        
        .fullscreen-svg {
            width: 100%;
            height: 100%;
        }
        
        .close-btn {
            position: absolute;
            top: 15px;
            right: 20px;
            background: #e74c3c;
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            font-size: 1.2rem;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .close-btn:hover {
            background: #c0392b;
        }
        
        /* Mode plein écran pour le SVG existant */
        .tree-svg-container.fullscreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: 1000;
            background: white;
            padding: 0;
            border-radius: 0;
            box-shadow: none;
            overflow: auto;
            scroll-behavior: smooth;
            /* Forcer l'affichage des scrollbars */
            overflow-x: auto;
            overflow-y: auto;
        }
        
        /* Styles pour le défilement fluide */
        .tree-svg-container.fullscreen::-webkit-scrollbar {
            width: 12px;
            height: 12px;
        }
        
        .tree-svg-container.fullscreen::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 6px;
        }
        
        .tree-svg-container.fullscreen::-webkit-scrollbar-thumb {
            background: #3498db;
            border-radius: 6px;
        }
        
        .tree-svg-container.fullscreen::-webkit-scrollbar-thumb:hover {
            background: #2980b9;
        }
        
        .tree-svg-container.fullscreen .tree-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            user-select: none; /* Empêcher la sélection de texte */
        }
        
        .tree-svg-container.fullscreen .tree-svg {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            user-select: none; /* Empêcher la sélection de texte */
        }
        
        /* Curseurs pour la navigation */
        .tree-svg-container.fullscreen.draggable {
            cursor: grab;
        }
        
        .tree-svg-container.fullscreen.draggable:active {
            cursor: grabbing;
        }
        
        .fullscreen-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0,0,0,0.9);
            z-index: 999;
            display: none;
        }
        
        .fullscreen-overlay.show {
            display: block;
        }
        
        .fullscreen-controls-overlay {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1001;
            display: none;
            background: rgba(255,255,255,0.95);
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        
        .fullscreen-controls-overlay.show {
            display: block;
        }
        
        .fullscreen-controls-overlay .zoom-controls {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 10px;
        }
        
        .fullscreen-controls-overlay .action-controls {
            display: flex;
            gap: 8px;
        }
        
        .fullscreen-controls-overlay .zoom-level {
            font-size: 0.9rem;
            font-weight: 600;
            color: #2c3e50;
            min-width: 50px;
            text-align: center;
        }
        

    </style>
{% endblock %}

{% block body %}
<div class="tree-container">
    <div class="tree-header">
        <h1><i class="fas fa-sitemap"></i> Arbre Généalogique Complet</h1>
        <p class="text-muted">Visualisation complète des relations familiales</p>
        
        <div class="tree-stats">
            {% set totalPeople = treeData.positionedPeople|length %}
            {% set totalMen = 0 %}
            {% set totalWomen = 0 %}
            
            {% for personId, personData in treeData.positionedPeople %}
                {% if personData.person.gender == 'homme' %}
                    {% set totalMen = totalMen + 1 %}
                {% elseif personData.person.gender == 'femme' %}
                    {% set totalWomen = totalWomen + 1 %}
                {% endif %}
            {% endfor %}
            
            <div class="stat-item">
                <div class="stat-number">{{ totalPeople }}</div>
                <div class="stat-label">Personnes</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">{{ totalMen }}</div>
                <div class="stat-label">Hommes</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">{{ totalWomen }}</div>
                <div class="stat-label">Femmes</div>
            </div>
        </div>
    </div>
    
    <div class="search-controls">
        <input type="text" id="searchInput" class="search-input" placeholder="🔍 Rechercher une personne...">
    </div>
    
    <div class="tree-controls">
        <button class="control-btn" onclick="centerTree()">
            <i class="fas fa-crosshairs"></i> Centrer
        </button>
        <button class="control-btn" onclick="zoomIn()">
            <i class="fas fa-search-plus"></i> Zoom +
        </button>
        <button class="control-btn" onclick="zoomOut()">
            <i class="fas fa-search-minus"></i> Zoom -
        </button>
        <button class="control-btn" onclick="toggleConnections()">
            <i class="fas fa-project-diagram"></i> Connexions
        </button>
        <button class="control-btn" onclick="toggleFullscreenSVG()">
            <i class="fas fa-expand" id="fullscreenIcon"></i> <span id="fullscreenText">SVG Plein Écran</span>
        </button>
    </div>
    
    <div class="tree-svg-container" id="treeContainer">
        <svg class="tree-svg" id="treeSvg">
            <!-- Les connexions seront dessinées ici par JavaScript -->
        </svg>
        
        <div class="tree-content" id="treeContent">
            <!-- Les personnes sont positionnées absolument selon les calculs du backend -->
            {% for personId, personData in treeData.positionedPeople %}
                {% set person = personData.person %}
                {% set genderClass = person.gender == 'homme' ? 'male' : (person.gender == 'femme' ? 'female' : 'unknown') %}
                
                <div class="person-node {{ genderClass }}" 
                     data-person-id="{{ person.id }}" 
                     data-level="{{ personData.level }}"
                     data-name="{{ person.name|lower }}"
                     data-x="{{ personData.x }}"
                     data-y="{{ personData.y }}"
                     style="position: absolute; 
                            width: {{ personData.width }}px;
                            height: {{ personData.height }}px;">
                    
                    <div class="person-avatar {{ genderClass }}">
                        {% if person.gender == 'homme' %}
                            👨
                        {% else %}
                            👩
                        {% endif %}
                    </div>
                    
                    <div class="person-name">{{ person.name }}</div>
                    
                    <div class="person-dates">
                        {% if person.birthDate %}
                            <div><i class="fas fa-birthday-cake"></i> {{ person.birthDate }}</div>
                        {% endif %}
                        {% if person.deathDate %}
                            <div><i class="fas fa-cross"></i> {{ person.deathDate }}</div>
                        {% endif %}
                    </div>
                    
                    <div class="person-actions">
                        <a href="{{ path('app_person_show', {id: person.id}) }}" class="btn btn-primary btn-tree">
                            <i class="fas fa-eye"></i>
                        </a>
                        <a href="{{ path('app_person_tree', {id: person.id}) }}" class="btn btn-success btn-tree">
                            <i class="fas fa-sitemap"></i>
                        </a>
                        <a href="{{ path('app_person_edit', {id: person.id}) }}" class="btn btn-warning btn-tree">
                            <i class="fas fa-edit"></i>
                        </a>
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>
</div>

<!-- Overlay plein écran -->
<div id="fullscreenOverlay" class="fullscreen-overlay"></div>

<!-- Contrôles plein écran -->
<div id="fullscreenControls" class="fullscreen-controls-overlay">
    <div class="zoom-controls">
        <button class="control-btn" onclick="fullscreenZoomOut()">
            <i class="fas fa-search-minus"></i>
        </button>
        <span id="zoomLevel" class="zoom-level">100%</span>
        <button class="control-btn" onclick="fullscreenZoomIn()">
            <i class="fas fa-search-plus"></i>
        </button>

    </div>

    <div class="action-controls">
        <button class="control-btn" onclick="downloadCurrentSVG()">
            <i class="fas fa-download"></i>
        </button>
        <button class="control-btn" onclick="printCurrentSVG()">
            <i class="fas fa-print"></i>
        </button>
        <button class="control-btn danger" onclick="toggleFullscreenSVG()">
            <i class="fas fa-times"></i>
        </button>
    </div>
</div>



<script>
console.log('Script starting...');

document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, starting initialization...');
    const searchInput = document.getElementById('searchInput');
    const treeContent = document.getElementById('treeContent');
    const treeSvg = document.getElementById('treeSvg');
    const personNodes = treeContent.querySelectorAll('.person-node');
    
    let showConnections = true;
    let zoomLevel = 1;
    
    // Données calculées côté serveur
    const treeData = {{ treeData|json_encode|raw }};
    
    // Recherche
    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        
        personNodes.forEach(node => {
            const personName = node.dataset.name;
            if (personName.includes(searchTerm)) {
                node.style.display = 'block';
                node.style.opacity = '1';
                node.style.transform = searchTerm ? 'scale(1.05)' : '';
                node.style.boxShadow = searchTerm ? '0 8px 25px rgba(52, 152, 219, 0.4)' : '';
            } else {
                node.style.opacity = searchTerm ? '0.3' : '1';
                node.style.transform = '';
                node.style.boxShadow = '';
            }
        });
    });
    
    // Calculer les dimensions nécessaires pour l'arbre
    function calculateTreeDimensions() {
        const people = treeData.positionedPeople || {};
        let minX = Infinity, maxX = -Infinity, minY = Infinity, maxY = -Infinity;
        
        // Trouver les limites de l'arbre
        Object.values(people).forEach(personData => {
            minX = Math.min(minX, personData.x);
            maxX = Math.max(maxX, personData.x + personData.width);
            minY = Math.min(minY, personData.y);
            maxY = Math.max(maxY, personData.y + personData.height);
        });
        
        // Ajouter de la marge
        const margin = 100;
        return {
            width: maxX - minX + (margin * 2),
            height: maxY - minY + (margin * 2),
            offsetX: -minX + margin,
            offsetY: -minY + margin
        };
    }
    
    // Rendu simple des chemins SVG calculés côté serveur
    function renderConnections() {
        if (!showConnections) {
            treeSvg.innerHTML = '';
            return;
        }
        
        const dimensions = calculateTreeDimensions();
        
        // Ajuster la taille du SVG et du conteneur
        treeSvg.setAttribute('width', dimensions.width);
        treeSvg.setAttribute('height', dimensions.height);
        treeContent.style.width = dimensions.width + 'px';
        treeContent.style.height = dimensions.height + 'px';
        
        let svgContent = '';
        const svgPaths = treeData.svgPaths || [];
        
        svgPaths.forEach(path => {
            if (path.type === 'line') {
                svgContent += `
                    <line x1="${path.x1 + dimensions.offsetX}" y1="${path.y1 + dimensions.offsetY}" 
                          x2="${path.x2 + dimensions.offsetX}" y2="${path.y2 + dimensions.offsetY}" 
                          stroke="${path.stroke}" 
                          stroke-width="${path.strokeWidth}" 
                          fill="none" />
                `;
            } else if (path.type === 'path') {
                // Ajuster les coordonnées du path pour le décalage
                let adjustedPath = path.d.replace(/M\s*(-?\d+)/g, (match, x) => `M ${parseInt(x) + dimensions.offsetX}`);
                adjustedPath = adjustedPath.replace(/Q\s*(-?\d+)\s*(-?\d+)\s*(-?\d+)\s*(-?\d+)/g, (match, x1, y1, x2, y2) => `Q ${parseInt(x1) + dimensions.offsetX} ${parseInt(y1) + dimensions.offsetY} ${parseInt(x2) + dimensions.offsetX} ${parseInt(y2) + dimensions.offsetY}`);
                
                svgContent += `
                    <path d="${adjustedPath}" 
                          stroke="${path.stroke}" 
                          stroke-width="${path.strokeWidth}" 
                          ${path.strokeDasharray ? `stroke-dasharray="${path.strokeDasharray}"` : ''}
                          fill="none" />
                `;
            }
        });
        
        treeSvg.innerHTML = svgContent;
    }
    
    // Fonctions de contrôle
    window.centerTree = function() {
        treeContent.scrollIntoView({ behavior: 'smooth', block: 'center' });
    };
    
    window.zoomIn = function() {
        zoomLevel = Math.min(zoomLevel + 0.1, 2);
        treeContent.style.transform = `scale(${zoomLevel})`;
        treeSvg.style.transform = `scale(${zoomLevel})`;
        setTimeout(renderConnections, 300);
    };
    
    window.zoomOut = function() {
        zoomLevel = Math.max(zoomLevel - 0.1, 0.5);
        treeContent.style.transform = `scale(${zoomLevel})`;
        treeSvg.style.transform = `scale(${zoomLevel})`;
        setTimeout(renderConnections, 300);
    };
    
    window.toggleConnections = function() {
        showConnections = !showConnections;
        renderConnections();
    };
    
    // Variables pour le mode plein écran
    let isFullscreen = false;
    
    // Variables pour la navigation par clic-glisser
    let isDragging = false;
    let dragStartX = 0;
    let dragStartY = 0;
    let scrollStartX = 0;
    let scrollStartY = 0;
    
    // Fonction pour basculer le mode plein écran
    window.toggleFullscreenSVG = function() {
                        // Toggle fullscreen mode
        
        const treeContainer = document.getElementById('treeContainer');
        const overlay = document.getElementById('fullscreenOverlay');
        const controls = document.getElementById('fullscreenControls');
        const fullscreenIcon = document.getElementById('fullscreenIcon');
        const fullscreenText = document.getElementById('fullscreenText');
        
        if (!isFullscreen) {
            // Activer le mode plein écran
            treeContainer.classList.add('fullscreen');
            overlay.classList.add('show');
            controls.classList.add('show');
            
            // Changer l'icône et le texte
            fullscreenIcon.className = 'fas fa-compress';
            fullscreenText.textContent = 'Quitter Plein Écran';
            
            // Empêcher le défilement de la page
            document.body.style.overflow = 'hidden';
            
            // Réinitialiser le zoom
            fullscreenZoom = 1;
            setTimeout(updateFullscreenZoom, 100);
            
            // Ajouter l'événement de clic-glisser directement
            setTimeout(function() {
                const treeSvg = document.getElementById('treeSvg');
                const treeContent = document.getElementById('treeContent');
                
                            // Add drag events to elements
                
                function handleMouseDown(event) {
                                        // Handle mouse down for drag start
                    
                    if (isFullscreen && event.button === 0) {
                        if (event.target.closest('button') || event.target.closest('a')) {
                            return;
                        }
                        
                        isDragging = true;
                        dragStartX = event.clientX;
                        dragStartY = event.clientY;
                        scrollStartX = treeContainer.scrollLeft;
                        scrollStartY = treeContainer.scrollTop;
                        
                        treeContainer.style.cursor = 'grabbing';
                        event.preventDefault();
                        event.stopPropagation();
                        
                        // Start dragging
                    }
                }
                
                if (treeSvg) treeSvg.addEventListener('mousedown', handleMouseDown);
                if (treeContent) treeContent.addEventListener('mousedown', handleMouseDown);
                
                // Ajouter l'événement mousemove global
                document.addEventListener('mousemove', function(event) {
                    if (isDragging && isFullscreen) {
                        const deltaX = event.clientX - dragStartX;
                        const deltaY = event.clientY - dragStartY;
                        
                        // Multiplier par un facteur pour accélérer le défilement
                        const scrollFactor = 3;
                        const newScrollLeft = scrollStartX - (deltaX * scrollFactor);
                        const newScrollTop = scrollStartY - (deltaY * scrollFactor);
                        
                        // Appliquer le scroll avec scrollTo
                        treeContainer.scrollTo({
                            left: newScrollLeft,
                            top: newScrollTop,
                            behavior: 'auto'
                        });
                        
                        event.preventDefault();
                        event.stopPropagation();
                        
                        // Log de debug pour diagnostiquer le problème horizontal
                        if (Math.abs(deltaX) > 10 || Math.abs(deltaY) > 10) {
                            console.log('=== DRAG DEBUG ===');
                            console.log('deltaX:', deltaX, 'deltaY:', deltaY);
                            console.log('newScrollLeft:', newScrollLeft, 'newScrollTop:', newScrollTop);
                            console.log('containerWidth:', treeContainer.clientWidth, 'scrollWidth:', treeContainer.scrollWidth);
                            console.log('canScrollHorizontal:', treeContainer.scrollWidth > treeContainer.clientWidth);
                            console.log('currentScrollLeft:', treeContainer.scrollLeft);
                            console.log('==================');
                        }
                    }
                });
                
                document.addEventListener('mouseup', function(event) {
                    if (isDragging) {
                        isDragging = false;
                        treeContainer.style.cursor = 'grab';
                        // End dragging
                    }
                });
            }, 500);
            
            isFullscreen = true;
        } else {
            // Désactiver le mode plein écran
            treeContainer.classList.remove('fullscreen');
            overlay.classList.remove('show');
            controls.classList.remove('show');
            
            // Remettre l'icône et le texte
            fullscreenIcon.className = 'fas fa-expand';
            fullscreenText.textContent = 'SVG Plein Écran';
            
            // Restaurer le défilement de la page
            document.body.style.overflow = 'auto';
            
            // Réinitialiser le zoom
            fullscreenZoom = 1;
            updateFullscreenZoom();
            
            // Réinitialiser l'état de glisser
            isDragging = false;
            treeContainer.style.cursor = 'default';
            
            isFullscreen = false;
        }
    };
    

    
    // Fonction pour télécharger le SVG actuel
    window.downloadCurrentSVG = function() {
        const svgElement = document.getElementById('treeSvg');
        const svgData = new XMLSerializer().serializeToString(svgElement);
        const svgBlob = new Blob([svgData], {type: 'image/svg+xml;charset=utf-8'});
        const svgUrl = URL.createObjectURL(svgBlob);
        
        const downloadLink = document.createElement('a');
        downloadLink.href = svgUrl;
        downloadLink.download = 'arbre-genealogique.svg';
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
        URL.revokeObjectURL(svgUrl);
    };
    
    // Fonction pour imprimer le SVG actuel
    window.printCurrentSVG = function() {
        const svgElement = document.getElementById('treeSvg');
        const svgData = new XMLSerializer().serializeToString(svgElement);
        const printWindow = window.open('', '_blank');
        
        printWindow.document.write(`
            <html>
                <head>
                    <title>Arbre Généalogique</title>
                    <style>
                        body { margin: 0; padding: 20px; }
                        svg { width: 100%; height: auto; }
                    </style>
                </head>
                <body>
                    <h1>Arbre Généalogique Complet</h1>
                    ${svgData}
                </body>
            </html>
        `);
        
        printWindow.document.close();
        printWindow.print();
    };
    
    // Variables pour le zoom plein écran
    let fullscreenZoom = 1;
    const minZoom = 0.1;
    const maxZoom = 5;
    const zoomStep = 0.1;
    
    // Fonctions de zoom pour la modal plein écran
    window.fullscreenZoomIn = function() {
        fullscreenZoom = Math.min(fullscreenZoom + zoomStep, maxZoom);
        updateFullscreenZoom();
    };
    
    window.fullscreenZoomOut = function() {
        fullscreenZoom = Math.max(fullscreenZoom - zoomStep, minZoom);
        updateFullscreenZoom();
    };
    
    window.fullscreenResetZoom = function() {
        fullscreenZoom = 1;
        updateFullscreenZoom();
    };
    
    function updateFullscreenZoom() {
        const treeContainer = document.getElementById('treeContainer');
        const treeContent = document.getElementById('treeContent');
        const treeSvg = document.getElementById('treeSvg');
        const zoomLevelDisplay = document.getElementById('zoomLevel');
        
        // Update zoom level
        
        if (treeContainer && treeContent && treeSvg && zoomLevelDisplay) {
            // Appliquer le zoom au contenu et au SVG
            treeContent.style.transform = `scale(${fullscreenZoom})`;
            treeSvg.style.transform = `scale(${fullscreenZoom})`;
            
            // Centrer le contenu
            treeContent.style.transformOrigin = 'center center';
            treeSvg.style.transformOrigin = 'center center';
            
            // Mettre à jour l'affichage du niveau de zoom
            zoomLevelDisplay.textContent = Math.round(fullscreenZoom * 100) + '%';
            
            // Toujours activer le défilement et le clic-glisser en plein écran
            treeContainer.style.overflow = 'auto';
            treeContainer.style.cursor = 'grab';
            treeContainer.classList.add('draggable');
        }
    }
    
    // Gestion du zoom et du défilement avec la molette de la souris
    document.addEventListener('DOMContentLoaded', function() {
        // Attendre un peu que tous les éléments soient créés
        setTimeout(function() {
            const treeContainer = document.getElementById('treeContainer');
            const treeSvg = document.getElementById('treeSvg');
            const treeContent = document.getElementById('treeContent');
            
            console.log('Elements found:', { 
                treeContainer: !!treeContainer, 
                treeSvg: !!treeSvg, 
                treeContent: !!treeContent 
            });
            
            if (treeContainer) {
            
            // Fonction pour gérer le clic-glisser
            function handleMouseDown(event) {
                console.log('Mouse down event:', { 
                    isFullscreen, 
                    fullscreenZoom, 
                    button: event.button,
                    target: event.target.tagName,
                    targetClass: event.target.className,
                    isButton: !!event.target.closest('button'),
                    isLink: !!event.target.closest('a')
                });
                
                if (isFullscreen && fullscreenZoom >= 1 && event.button === 0) { // Clic gauche seulement
                    // Vérifier qu'on ne clique pas sur un bouton ou un lien
                    if (event.target.closest('button') || event.target.closest('a')) {
                        console.log('Click on button/link, ignoring drag');
                        return;
                    }
                    
                    isDragging = true;
                    dragStartX = event.clientX;
                    dragStartY = event.clientY;
                    scrollStartX = treeContainer.scrollLeft;
                    scrollStartY = treeContainer.scrollTop;
                    
                    // Changer le curseur
                    treeContainer.style.cursor = 'grabbing';
                    
                    // Empêcher la sélection de texte et le comportement par défaut
                    event.preventDefault();
                    event.stopPropagation();
                    
                    console.log('Drag started:', { dragStartX, dragStartY, scrollStartX, scrollStartY });
                } else {
                    console.log('Drag conditions not met:', { isFullscreen, fullscreenZoom, button: event.button });
                }
            }
            
            // Ajouter l'événement sur le conteneur, le SVG et le contenu
            treeContainer.addEventListener('mousedown', handleMouseDown);
            if (treeSvg) treeSvg.addEventListener('mousedown', handleMouseDown);
            if (treeContent) treeContent.addEventListener('mousedown', handleMouseDown);
            
            // Gestion de la molette
            treeContainer.addEventListener('wheel', function(event) {
                // Vérifier si le mode plein écran est actif
                if (isFullscreen) {
                    // Zoom direct avec la molette en mode plein écran
                    event.preventDefault();
                    const delta = event.deltaY > 0 ? -zoomStep : zoomStep;
                    fullscreenZoom = Math.max(minZoom, Math.min(maxZoom, fullscreenZoom + delta));
                    updateFullscreenZoom();
                }
            });
            
            // Utiliser document pour capturer le mousemove même si la souris sort du conteneur
            document.addEventListener('mousemove', function(event) {
                if (isDragging && isFullscreen) {
                    const deltaX = event.clientX - dragStartX;
                    const deltaY = event.clientY - dragStartY;
                    
                    const newScrollLeft = scrollStartX - deltaX;
                    const newScrollTop = scrollStartY - deltaY;
                    
                    treeContainer.scrollLeft = newScrollLeft;
                    treeContainer.scrollTop = newScrollTop;
                    
                    event.preventDefault();
                    event.stopPropagation();
                    
                    console.log('Dragging:', { deltaX, deltaY, newScrollLeft, newScrollTop });
                }
            });
            
            document.addEventListener('mouseup', function(event) {
                if (isDragging) {
                    isDragging = false;
                    treeContainer.style.cursor = 'grab';
                }
            });
            
            // Empêcher le menu contextuel pendant le glisser
            treeContainer.addEventListener('contextmenu', function(event) {
                if (isDragging) {
                    event.preventDefault();
                }
            });
            }
        }, 1000); // Attendre 1 seconde
    });
    
    // Fermer le mode plein écran avec la touche Échap
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape' && isFullscreen) {
            toggleFullscreenSVG();
        }
    });
    
    // Positionner les personnes avec les bonnes coordonnées
    function positionPeople() {
        const dimensions = calculateTreeDimensions();
        
        personNodes.forEach(node => {
            const x = parseInt(node.dataset.x);
            const y = parseInt(node.dataset.y);
            node.style.left = (x + dimensions.offsetX) + 'px';
            node.style.top = (y + dimensions.offsetY) + 'px';
        });
    }
    
    // Initialisation
    setTimeout(() => {
        positionPeople();
        renderConnections();
    }, 100);
    
    // Redessiner lors du redimensionnement
    window.addEventListener('resize', function() {
        setTimeout(renderConnections, 300);
    });
});
</script>
{% endblock %}